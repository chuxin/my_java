0、微服务
    概念：将一个单一的应用程序拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间使用轻量级通信机制（通常是 HTTP RESTFUL API）进行通讯

    特点：
        ① 单个应用拆分为多个独立的服务，每个微服务都可以单独开发、部署和维护。所需的团队规模小，成本小。
        ② 不同的微服务可以使用不同的数据存储方式，例如有的用 Redis，有的使用 MySQL。
        ③ 不同模块可以使用不同的技术或语言进行开发，开发模式更加灵活。
        ④ 在微服务架构中，故障被隔离在单个服务中，避免系统的整体崩溃。

    微服务框架：
        ① Spring Cloud：它能够基于 REST 服务来构建服务，帮助架构师构建出一套完整的微服务技术生态链。
        ② Dropwizard：用于开发高性能和 Restful 的 Web 服务，对配置、应用程序指标、日志记录和操作工具都提供了开箱即用的支持。
        ③ Restlet：该框架遵循 RST 架构风格，可以帮助 Java 开发人员构建微服务。
        ④ Spark：最好的 Java 微服务框架之一，该框架支持通过 Java 8 和 Kotlin 创建微服务架构的应用程序。
        ⑤ Dubbo：由阿里巴巴开源的分布式服务治理框架。

    Spring Cloud：
        概念：Spring Cloud 是分布式微服务架构，基于 Spring Boot 进行再封装实现。
             Spring Cloud 提供了一系列 Starter，这些 Starter 是 Spring Cloud 使用 Spring Boot 思想对各个微服务框架进行再封装的产物。
             虽然 Spring Boot 能够用于开发单个微服务，但它并不具备管理和协调微服务的能力，因此它只能算是一个微服务快速开发框架，而非微服务框架。
             Spring Cloud 包括 Spring Cloud Gateway、Spring Cloud Config、Spring Cloud Bus 等近 20 个服务组件，
                这些组件提供了服务治理、服务网关、智能路由、负载均衡、熔断器、监控跟踪、分布式消息队列、配置管理等领域的解决方案。

        版本：
            Spring Cloud Netflix 是 Spring Cloud 的第一代实现，主要由 Eureka、Ribbon、Feign、Hystrix 等组件组成。
            Spring Cloud Alibaba 是 Spring Cloud 的第二代实现，主要由 Nacos、Sentinel、Seata 等组件组成。

        两个版本的组件对比
            第一代实现（Netflix	    状态	                          第二代实现（Alibaba）	    状态
            Ereka	                2.0 孵化失败	                  Nacos Discovery	        性能更好，感知力更强
            Ribbon	                停更进维	                      Spring Cloud Loadbalancer	用于代替 Ribbon
            Hystrix	                停更进维	                      Sentinel	                可视化配置，上手简单
            Zuul	                停更进维	                      Spring Cloud Gateway	    性能为 Zuul 的 1.6 倍
            Spring Cloud Config	    搭建复杂，无可视化界面，上手难点大   Nacos Config	            搭建过程简单，有可视化界面，容易上手


1、Spring Cloud OpenFeign
    概念：通过 Feign，我们可以像调用本地方法一样来调用远程服务，而完全感觉不到这是在进行远程调用

    例子地址：http://c.biancheng.net/springcloud/open-feign.html


2、Spring Cloud Gateway
    概念：一个搭建在客户端和微服务之间的服务，我们可以在 API 网关中处理一些非业务功能的逻辑，例如权限验证、监控、缓存、请求路由等

    网关实现方案：
        ① Spring Cloud Gateway
        ② Spring Cloud Netflix Zuul
        ③ Kong
        ④ Nginx+Lua
        ⑤ Traefik

    路由转发：
        Route（路由）：网关最基本的模块。它由一个 ID、一个目标 URI、一组断言（Predicate）和一组过滤器（Filter）组成。
        Predicate（断言）：路由转发的判断条件，我们可以通过 Predicate 对 HTTP 请求进行匹配，例如请求方式、请求路径、请求头、参数等，如果请求与断言匹配成功，则将请求转发到相应的服务。
        Filter（过滤器）：过滤器，我们可以使用它对请求进行拦截和修改，还可以使用它对上文的响应进行再处理。
        注意：Route 和 Predicate 必须同时声明

    执行原理：
        ① 客户端将请求发送到 Spring Cloud Gateway 上。
        ② Spring Cloud Gateway 通过 Gateway Handler Mapping 找到与请求相匹配的路由，将其发送给 Gateway Web Handler。
        ③ Gateway Web Handler 通过指定的过滤器链（Filter Chain），将请求转发到实际的服务节点中，执行业务逻辑返回响应结果。
        ④ 过滤器之间用虚线分开是因为过滤器可能会在转发请求之前（pre）或之后（post）执行业务逻辑。
        ⑤ 过滤器（Filter）可以在请求被转发到服务端前，对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。
        ⑥ 过滤器可以在响应返回客户端之前，对响应进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。
        ⑦ 响应原路返回给客户端。

    例子地址：http://c.biancheng.net/springcloud/gateway.html


3、Spring Cloud Config
    概念：各类服务都有配置文件，但这些文件散落在各个服务中，所以需要配置中心对这些配置文件进行统一管理，集中化配置。
         市面上的同类产品，如：百度的 Disconf、淘宝的 diamond、360 的 QConf、携程的 Apollo

    组成部分：
        ① Config Server：分布式配置中心，是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密信息和解密信息的访问接口。
        ② Config Client：各个微服务，它们通过 Config Server 对配置进行管理，并从 Config Sever 中获取和加载配置信息。

    Spring Cloud Bus
        介绍：可以动态的让微服务更新自己的配置文件

    例子地址：http://c.biancheng.net/springcloud/config.html


4、Spring Cloud Alibaba Nacos
    概念：实现服务的注册与发现，实现配置的动态刷新。

    例子地址：http://c.biancheng.net/springcloud/nacos.html















1、MAC系统下安装
    # 先更新 brew
    brew update

    # 安装 rabbitmq 服务器
    brew install rabbitmq

    # 启动命令
    ./sbin/rabbitmq-server
    # 后台启动
    ./sbin/rabbitmq-server -detached

    # 查询服务器状态
    ./sbin/rabbitmqctl status

    # 本地界面访问地址
    http://127.0.0.1:15672/#/queues
    管理员账号： guest / guest


2、rabbitMQ 介绍
    消息队列(Message Queue) ：
        是一种应用间的通信方式。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。

    应用场景：下单后扣减库存、发红包、发短信通知、广播、错峰流控等等用于业务解耦的情况

    rabbitMQ 术语
        Message：消息，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。
        Connection：网络连接，比如一个TCP连接
        channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。本质上是复用 TCP 连接，减小建立和销毁 TCP的开销。
        Exchange：交换机，它指定消息按什么规则，路由到哪个队列，可以理解成一张路由表。用来接收生产者发送的消息并将这些消息路由给服务器中的队列
        Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。
        Routing Key：路由关键字，exchange根据这个关键字进行消息投递。
        Queue：消息队列载体，每个消息都会被投入到一个或多个队列。它是消息的容器，消息一直在队列里面，等待消费者连接到这个队列将其取走。
        producer：消息生产者，就是投递消息的程序。
        consumer：消息消费者，就是接受消息的程序。
        Virtual Host：虚拟主机，表示一批交换器、消息队列和相关对象集合。一个broker里可以开设多个vhost，每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。
        Broker：表示消息队列服务器实体。

    消息队列的使用过程大概如下：
        ① 客户端连接到消息队列服务器，打开一个channel。
        ② 客户端声明一个exchange，并设置相关属性。
        ③ 客户端声明一个queue，并设置相关属性。
        ④ 客户端使用routing key，在exchange和queue之间建立好绑定关系。
        ⑤ 客户端投递消息到exchange。

    Exchange 分发策略
        direct：
            一对一。完全匹配、单播的模式。
            消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。
              路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”
        work queue / Task queues：
            一对多。
            当生产消息的速度远远大于消费速度，消息就会堆积，无法及时处理。此时可以用 work 模型，
              让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。
        fanout：
            一对多。
            转发消息是最快的。每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，
              只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，
              每台子网内的主机都获得了一份复制的消息
        topic：
            一对多。通配符匹配。
            可以根据 RoutingKey 把消息路由到不同的队列，队列绑定到 Routing key 的时候可以使用通配符！
            Routingkey 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert
            通配符介绍：
                audit.#   匹配audit.irs.corporate或者 audit.irs 等
                audit.*   只能匹配 audit.irs
        headers：
            headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了

    消息确认机制
        概念：本质是为了解决RabbitMQ消息丢失问题

        ① 消息发送确认
            概念：在生产者将消息发送给交换器，交换器传递给队列的过程中，确认是否到达交换器，确认是否到达队列。
            背景：RabbitMQ在接收到消息后，还需要一段时间消息才能存入磁盘，并且其实也不是每条消息都会存入磁盘，
                   可能仅仅只保存到cache中，这时，如果RabbitMQ正巧发生崩溃，消息则就会丢失
            解决办法：
                通过事务实现：只有消息成功被rabbitmq服务器接收，事务才能提交成功，否则便进行回滚，消息重发。非常影响性能
                通过发送方确认机制(publisher confirm)实现：批量confirm模式、异步confirm模式

        ② 消费接收确认
            自动ACK：优点是可以提高吞吐量，缺点是会丢失消息
            手动ACK：正常情况都是建议使用手动ACK。优点是消息不会丢失，缺点是会造成消费者过载

    参考文章：
        https://blog.csdn.net/sinat_31583645/article/details/116766214
        https://www.cnblogs.com/miketwais/p/RabbitMQ.html


3、使用例子
    官网：https://www.rabbitmq.com/tutorials/tutorial-five-java.html

    代码案例：
        pom.xml
            <dependency>
                <groupId>com.rabbitmq</groupId>
                <artifactId>amqp-client</artifactId>
                <version>5.7.2</version>
            </dependency>

        public static void testRabbitMQ() {
            RabbitProducerTest rpt = new RabbitProducerTest();
            try {
                rpt.sendMessage();
            } catch (Exception e) {
                e.printStackTrace();
            }

            RabbitConsumerTest rct = new RabbitConsumerTest();
            try {
                rct.receiveMessage();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // 消息生产者
        public class RabbitProducerTest {

            public void sendMessage() throws IOException, TimeoutException {
                // 1.创建ConnectionFactory , 并进行初始化
                ConnectionFactory cf = new ConnectionFactory();
                cf.setUsername("mybbbb");
                cf.setPassword("mybbbb");
                cf.setHost("127.0.0.1");
                cf.setHandshakeTimeout(600000);
                cf.setConnectionTimeout(600000);
                cf.setPort(5672);
                cf.setVirtualHost("/");

                // 获取连接对象
                Connection connection = cf.newConnection();
                // 获取连接中通道
                Channel channel = connection.createChannel();

                // 通道绑定对应消息队列
                // 参数1:  队列名称 如果队列不存在自动创建
                // 参数2:  用来定义队列特性是否要持久化 true 持久化队列   false 不持久化
                // 参数3:  exclusive 是否独占队列，表示声明的当前队列只允许当前的连接所使用  true 独占队列   false  不独占
                // 参数4:  autoDelete: 是否在消费完成后自动删除队列  true 自动删除  false 不自动删除
                // 参数5:  额外附加参数
                channel.queueDeclare("hello", true, false, false, null);

                // 发布消息
                // 参数1: 交换机名称 参数2:队列名称  参数3:传递息额外设置（MessageProperties.PERSISTENT_TEXT_PLAIN 设置消息持久化）  参数4:消息的具体内容
                channel.basicPublish("", "hello", MessageProperties.PERSISTENT_TEXT_PLAIN, "hello rabbitmq777对的".getBytes());

                //关闭连接
                channel.close();
                connection.close();
                System.out.println("生产者发送成功....");
            }
        }

        // 消息接受者
        public class RabbitConsumerTest {

            public void receiveMessage() throws IOException, TimeoutException, InterruptedException {
                // 1. 创建和初始化ConnectFactory
                ConnectionFactory factory = new ConnectionFactory();
                factory.setUsername("mybbbb");
                factory.setPassword("mybbbb");
                factory.setHost("127.0.0.1");
                factory.setHandshakeTimeout(600000);
                factory.setConnectionTimeout(600000);
                factory.setPort(5672);
                factory.setVirtualHost("/");

                Connection connection = factory.newConnection();
                // 创建通道
                Channel channel = connection.createChannel();

                // 通道绑定队列：与生产端一致
                channel.queueDeclare("hello", true, false, false, null);

                // 获取消息
                // 参数1: 消费那个队列的消息 队列名称
                // 参数2: 开始消息的自动确认机制[只要消费就从队列删除消息]
                // 参数3: 消费时的回调接口
                channel.basicConsume("hello", true, new DefaultConsumer(channel) {
                    @Override
                    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
                        System.out.println("取出消息:===>" + new String(body));
                    }
                });

                // 消费端连接与同道不用关闭，一直处于监听状态
            }
        }


X、遇到的问题
    问题描述：
        An unexpected connection driver error occured (Exception message: Socket closed)
    原因：
        百度了很多，有的说修改virtual host权限，将virtual host Name改为 / 、给用户增加权限等等，好像都没用。配置文件里面的账号密码也都没有错误。
        查阅了很多资料之后才发现：
        1、port端口号只能写5672，虽然浏览器地址是http://localhost:15672，但是在配置文件里面只能写5672
        2、登录账户不能写guest，因为guest默认为rabbitmq的管理员账号，只允许在本地也就是浏览器页面登录，不允许远端登录，需要配置，但是可能会很麻烦。所以好的解决办法就是：在rabbitmq新建一个用户，然后赋予权限，用新建用户进行登录。然后问题就解决啦！
    解决办法：
        add a user -> tags 选择 management，不要选 admin -> 点击 新创建的user 进去 -> set permission -> set topic permission
        参考博文： https://blog.csdn.net/theRengar/article/details/118933418


    问题描述：
        rabbitMQ  TimeoutException
    原因：
        连接 rabbitmq 超时
    解决办法：
        factory.setHost("127.0.0.1");
        factory.setHandshakeTimeout(600000);
        factory.setConnectionTimeout(600000);



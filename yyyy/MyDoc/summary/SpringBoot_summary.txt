1、springboot介绍
    作用：
        ① 提供了大量开箱即用（out-of-the-box）的依赖模块
        ② 简化配置

    IDEA创建Spring Boot项目
        方法一 (感觉不太灵)
        ① 新建项目，选择 Spring Initializr, sdk 1.8, default
        ② 选择性配置：GroupId、ArtifactId、Type=Maven、Packaging=jar、Java version=8或11、Package
        ③ 选择 springboot 的版本 2.45, 选择所依赖的 Spring Boot 组件 web->springweb

        方法二
        ① 新建项目，选择 Maven，选择 java 版本 1.8
        ② 找个其它项目把 pom.xml 里的内容拷贝过来，主要是 parent、dependencies、build 标签里的内容替换一下

2、配置相关
    配置绑定：把配置文件中的值与 JavaBean 中对应的属性进行绑定。
    具体操作：
        1、@ConfigurationProperties 注解
           ① application.yml 配置自定义属性
                person:
                  lastName: 张三
                  age: 18
                  boss: false
           ② 创建 src/main/java/com/example/demo/fmConfig/Person.java 实体类，将配置文件中的属性映射到这个实体类上
                // @Component 注解是将下面的组件添加到IOC容器中，只有在IOC容器里后，下面的组件才可以用 @ConfigurationProperties 注解
                @Component
                // @ConfigurationProperties 告诉 SpringBoot 将本类中的所有字段属性和yml配置文件中的自定义配置进行一一绑定
                // prefix = "person" 指名yml配置文件中的哪项自定义配置和这里的实体类一一对应
                @ConfigurationProperties(prefix = "person")
                public class Person {
                    private String lastName;
                    private Integer age;
                    private Boolean boss;
                    ... ...
                }
            ③ 在 HelloController 中展示配置的内容
                @Controller
                public class HelloController {
                    // 自动查找IOC容器中的组件
                    @Autowired
                    private Person person;
                    @ResponseBody
                    @RequestMapping("/hello")
                    public Person hello() {
                        return person;
                    }
                }

        2、@Value 注解
            ① 同上
            ② 同上，只是具体使用时有些区别，不需要 @configuration
                @Component
                public class Person {
                    @Value("${person.lastName}")
                    private String lastName;
                    @Value("${person.age}")
                    private Integer age;
                    @Value("${person.boss}")
                    private Boolean boss;
                    ... ...
                }
            ③ 同上

        3、对比 @Value 与 @ConfigurationProperties
            ①. 使用位置不同
                @ConfigurationProperties：标注在 JavaBean 的类名上；
                @Value：标注在 JavaBean 的属性上。
            ②. 功能不同
                @ConfigurationProperties：用于批量绑定配置文件中的配置；
                @Value：只能一个一个的指定需要绑定的配置。
            ③. 松散绑定支持不同
                @ConfigurationProperties：支持松散绑定（松散语法），例如实体类 Person 中有一个属性为 firstName，那么配置文件中的属性名支持以下写法：
                    person.firstName  、  person.first-name  、  person.first_name  、  PERSON_FIRST_NAME
                @Vaule：不支持松散绑定。
            ④. SpEL 支持不同
                @ConfigurationProperties：不支持 SpEL 表达式;
                @Value：支持 SpEL 表达式。
            ⑤. 复杂类型封装
                @ConfigurationProperties：支持所有类型数据的封装，例如 Map、List、Set、以及对象等；
                @Value：只支持基本数据类型的封装，例如字符串、布尔值、整数等类型。
            ⑥. 应用场景不同
                若只是获取配置文件中的某项值，则推荐使用 @Value 注解；
                若专门编写了一个 JavaBean 来和配置文件进行映射，则建议使用 @ConfigurationProperties 注解。

        4、@PropertySource 为了避免所有的配置都放在 application.yml 中，所以将一些与框架无关的自定义配置抽取出来，单独放在一个配置文件里
            ① 同上
            ② 同上，只是具体使用时有些区别，增加了 @PropertySource
                @PropertySource(value = "classpath:Person33.properties") // 指向对应的配置文件， 这里要特别注意大小写 ！！
                @Component
                @ConfigurationProperties(prefix = "person44")
                public class Person33 {
                    private String lastName;
                    private Integer age;
                    private Boolean boss;
                    ... ...
                }
            ③ 同上
            遗留问题：中文乱码问题 ？？？

        https://blog.csdn.net/qq_34093116/article/details/123710936  读取配置文件，可以参考一下，清洗明了

    导入 Spring 配置
        1、使用 @ImportResource 注解加载配置文件(不推荐)
            ① 创建一个接口 com/example/demo/fmConfig/service/PersonService.java
                public interface PersonService {
                    public Person getPersonInfo();
                }
            ② 创建一个类实现①中接口 com/example/demo/fmConfig/service/PersonServiceImpl.java
                public class PersonServiceImpl implements PersonService {
                    @Autowired
                    private Person person;

                    @Override
                    public Person getPersonInfo() {
                        return person;
                    }
                }
            ③ 添加一个 spring 配置文件 src/main/resources/beans.xml
                <?xml version="1.0" encoding="UTF-8" ?>
                <beans xmlns="http://www.springframework.org/schema/beans"
                       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
                    <bean id="personService" class="com.example.demo.fmConfig.service.PersonServiceImpl"></bean>
                </beans>
            ④ 在 com/example/demo/ZzzzApplicationTests.java 中去校验 IOC 容器中有无spring配置文件中的 PersonService
                @SpringBootTest
                class ZzzzApplicationTests {
                    @Autowired
                    ApplicationContext ioc;

                    @Test
                    public void testXXXService() {
                        boolean b = ioc.containsBean("personService");
                        if (b) {
                            System.out.println("personService 已经添加到 IOC 容器中");
                        } else {
                            System.out.println("personService 没有添加到 IOC 容器中");
                        }
                    }
                }
            ⑤ 将 Spring 配置文件 beans.xml 加载到实际项目中
                @ImportResource(locations = {"classpath:/beans.xml"})
                @SpringBootApplication
                public class ZzzzApplication {
                  public static void main(String[] args) {
                      SpringApplication.run(ZzzzApplication.class, args);
                  }
                }

        2、全注解方式加载 Spring 配置文件(推荐)
            ① 同上，创建一个接口 com/example/demo/fmConfig/service/PersonService.java
            ② 同上，创建一个类实现①中接口 com/example/demo/fmConfig/service/PersonServiceImpl.java
            ③ 创建一个配置类 com/example/demo/fmConfig/service/MyAppConfig.java
                // @Configuration 注解用于定义一个配置类，相当于 Spring 的配置文件
                @Configuration
                public class MyAppConfig {
                    // 配置类中包含一个或多个 @Bean 注解的方法，该方法等同于 Spring 配置文件中的 <bean> 标签定义的组件。
                    // 与 <bean id="personService" class="PersonServiceImpl"></bean> 等价
                    // 返回值以组件的形式添加到容器中
                    // 方法名 等同于 <bean> 标签的属性 id
                    @Bean
                    public PersonService personService() {
                        System.out.println("在容器中添加了一个组件 peronService");
                        return new PersonServiceImpl();
                    }
                }
            ④ 同上，在 com/example/demo/ZzzzApplicationTests.java 中去校验 IOC 容器中有无spring配置文件中的 PersonService

    Spring Boot Profile（各种环境配置）
        1、如何配置
            ① 配置 application.properties 类型文件。在 src/main/resources 下添加 4 个配置文件
                    application.properties：主配置文件
                        # 默认端口号
                        server.port=8080
                        # 激活指定的profile
                        spring.profiles.active=test
                    application-dev.properties：开发环境配置文件
                        # 开发环境
                        server.port=8081
                    application-test.properties：测试环境配置文件
                    application-prod.properties：生产环境配置文件
            ② 配置 application.yml 类型文件。只需一个 yml 文件即可
                #默认配置
                server:
                  port: 8080
                #切换配置
                spring:
                  profiles:
                    active: test
                ---
                #开发环境
                server:
                  port: 8081
                spring:
                  config:
                    activate:
                      on-profile: dev
                ---
                #测试环境
                server:
                  port: 8082
                spring:
                  config:
                    activate:
                      on-profile: test
        2、如何激活
            先将项目打包  mvn clean package
            ① 命令行激活配置  java -jar target/helloworld-0.0.1-SNAPSHOT.jar  --spring.profiles.active=dev
            ② 虚拟机参数激活  java -Dspring.profiles.active=prod -jar target/helloworld-0.0.1-SNAPSHOT.jar

    Spring Boot 配置文件优先级
        配置文件加载优先级顺序从大到小，注意：resources，config 的目录名称不能修改               
            application.properties 先加载
                yyyy/config/mmm/.
                yyyy/config/.
                yyyy/.
                yyyy/src/main/resources/config/.   ( classpath )
                yyyy/src/main/resources/.         ( classpath )
            application.yml 后加载
                yyyy/src/main/resources/application.yml    ( classpath )

    Spring Boot 指定项目外部配置文件
        ① 会使项目本身的配置文件失效，只使用外部配置文件
            java -jar target/demo-0.0.1-SNAPSHOT.jar --spring.config.location=/Applications/XAMPP/xamppfiles/htdocs/my_practice22/my_java/yyyy/MyDoc/test/application.properties
        ② 不会使项目本身的配置文件失效，且其优先级是最高的
            java -jar target/demo-0.0.1-SNAPSHOT.jar --spring.config.additional-location=/Applications/XAMPP/xamppfiles/htdocs/my_practice22/my_java/yyyy/MyDoc/test/application.properties
            因此加载顺序为：
            spring.config.additional-location 指定的外部配置文件 /Applications/XAMPP/xamppfiles/htdocs/my_practice22/my_java/yyyy/MyDoc/test/application.properties
            classpath:/config/application.yml
            classpath:/application.yml

    加载配置文件的顺序遵循以下规则：
        ① 先加载 JAR 包外的配置文件，再加载 JAR 包内的配置文件；
            JAR 包外的 application.yml 优先级最高
            创建一个 run-yyyy 目录，其下再新建 application.yml ，并设置上下文路径为“/out-default”，并激活生产环境（prod）Profile
            执行命令 java -jar mybootdemo-0.0.1-SNAPSHOT.jar
            此时项目的优先级顺序为：JAR 包外 application.yml > JAR 包内 application-prod.yml > JAR 包内其他配置文件
        ② 先加载 config 目录内的配置文件，再加载 config 目录外的配置文件；
        ③ 先加载 config 子目录下的配置文件，再加载 config 目录下的配置文件；
        ④ 先加载 appliction-{profile}.properties/yml，再加载 application.properties/yml；
        ⑤ 先加载 .properties 文件，再加载 .yml 文件。

    Spring Boot 配置形式及其加载顺序（优先级由高到低）：  【完整版，但是有些没接触，看不懂】
        ① 命令行参数
            java -jar {Jar文件名} --{参数1}={参数值1} --{参数2}={参数值2}
            java -jar springbootdemo-0.0.1-SNAPSHOT.jar --server.port=8081 --server.servlet.context-path=/bcb
        ② 来自 java:comp/env 的 JNDI 属性
        ③ Java 系统属性（System.getProperties()）
        ④ 操作系统环境变量
        ⑤ RandomValuePropertySource 配置的 random.* 属性值
        ⑥ 配置文件（YAML 文件、Properties 文件）
        ⑦ @Configuration 注解类上的 @PropertySource 指定的配置文件
        ⑧ 通过 SpringApplication.setDefaultProperties 指定的默认属性


3、日志相关
    说明：SpringBoot 底层使用 slf4j+logback 的方式记录日志
    具体操作：
        // SLF4J 日志级别从小到大 trace > debug > info > warn > error
        // Spring Boot 日志默认级别为 info
        @Test
        public void testLog() {
            // 时间日期  日志级别  进程 ID  分隔符:---  线程名方括号括起来（可能会截断控制台输出）  Logger名称  日志内容
            // 2022-04-07 10:25:07 [main] TRACE com.example.demo.ZzzzApplicationTests - trace 级别日志
            logger.trace("trace 级别日志");
            logger.debug("debug 级别日志");
            logger.info("info 级别日志");
            logger.warn("warn 级别日志");
            logger.error("error 级别日志");
        }

    修改默认的日志配置
        // 在 application.properties 增加配置如下配置
        # 默认日志级别
        logging.level.com.example.demo=trace
        # 相对路径的方式设置日志输出的位置（项目根目录下 testLog/myLog/spring.log）
        logging.file.path=testLog/myLog
        # 绝对路径的方式输出 (磁盘根目录下 /Applications/XAMPP/xamppfiles/htdocs/my_practice22/my_java/testLog/myLog2/spring.log)
        # logging.file.path=/Applications/XAMPP/xamppfiles/htdocs/my_practice22/my_java/testLog/myLog2
        # 控制台日志输出格式
        logging.pattern.console=%d{yyyy-MM-dd hh:mm:ss} [%thread] %-5level %logger{50} - %msg%n
        # 日志文件输出格式
        logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} === - %msg%n

    自定义日志配置，这一块先忽略，有点复杂 ？？？


4、静态资源映射规则
    1、WebJars 映射操作步骤
        ① 到 https://www.webjars.org/ 寻找需要的插件，选择 classic WebJars
        ② pom.xml 里添加依赖关系。
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>jquery</artifactId>
                <version>3.6.0</version>
            </dependency>
        ③ 右击 pom.xml 文件，Maven -> load project，更新配置文件里插件库到本地
        ④ 启动 Spring Boot，浏览器访问"http://localhost:8080/webjars/jquery/3.6.0/jquery.js"
    2、默认资源映射，优先级顺序
        classpath:/META-INF/resources/     (src/main/resources/META-INF/resources/test.html)
        classpath:/resources/              (src/main/resources/resources/test.html)
        classpath:/static/                 (src/main/resources/static/test.html)
        classpath:/public/                 (src/main/resources/public/test.html)

5、数据库访问
    1、Spring Boot JDBC访问数据库
        ① 导入 JDBC 插件
            <!--导入JDBC的场景启动器-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jdbc</artifactId>
            </dependency>
            <!--导入数据库驱动-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <scope>runtime</scope>
            </dependency>
        ② 配置数据源 application.yml
            spring:
                datasource:
                    username: root
                    password: root
                    url: jdbc:mysql://127.0.0.1:3306/bianchengbang_jdbc
                    driver-class-name: com.mysql.cj.jdbc.Driver
        ③ 连接数据库
            @Test
            public void testJDBC() throws SQLException {
                System.out.println("默认数据源为：" + dataSource.getClass());
                System.out.println("数据库连接实例：" + dataSource.getConnection());
                //访问数据库
                System.out.println(Integer.class);
                Integer i = jdbcTemplate.queryForObject("select count(1) from `user`", Integer.class);
                System.out.println("user表共有：" + i + " 条数据");
            }

    2、Spring Boot整合MyBatis  没成功，等学了 spring 的 bean 再来看 ？？？？

    3、Spring Boot数据源配置原理  先忽略
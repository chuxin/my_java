Maven 概念：Maven 是专门为Java项目打造的管理和构建工具

Maven Wrapper
    概念：给一个项目A提供一个独立的，指定版本的Maven，供A使用。
        另一个作用是把项目的mvnw、mvnw.cmd和.mvn提交到版本库中，可以使所有开发人员使用统一的Maven版本


Maven 项目实战，打包项目并被其它项目依赖调用
   更新一下 pom.xml 文件的内容
       <plugin>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-maven-plugin</artifactId>
           <configuration>
               <mainClass>org22.example22.demo.MycrudApplication</mainClass>
               <skip>true</skip>
           </configuration>
       </plugin>
   maven install 上传到本地仓库
   另一个项目配置pom.xml，引入包，直接使用。目前的问题是，只能是静态方法，或者调用的方法内部不能是 @Autowired 的对象
   参考文档：
       https://blog.csdn.net/m0_67392273/article/details/126435597
       https://blog.csdn.net/qq_22310551/article/details/122740121


MAC 安装 mvn
    brew install mvn
    mvn --version
    mvn clean package   # 将项目打包
    # Maven 对项目进行打包时，位于项目根目录下的配置文件是无法被打包进项目的 JAR 包的，因此位于根目录下的默认配置文件无法在 JAR 中生效


Maven 命令详解：
    # 查看Maven的版本信息
    mvn -version

    # 清理。删除原来编译和测试的目录，即 target 目录，但是已经install 到仓库里的包不会删除
    mvn clean

    # 编译主程序
    mvn compile

    # 打包项目到 target 目录
    mvn package

    # 打包项目并上传到本地/私有/公有仓库
    mvn install

    # 查看所有环境变量。所有环境变量都可以使用以env.开头的Maven属性引用。 例如${env.JAVA_HOME}指代了JAVA_HOME环境变量的值
    mvn help:system

    参考文档：https://blog.csdn.net/qq_51409098/article/details/125142287


Maven 仓库
    ① 本地仓库，存在于当前电脑上,默认存放在~\.m2\repository中,为本机上所有的Maven工程服务。你也可以通过Maven的配置文件Maven_home/conf/settings.xml中修改本地仓库所在的目录。
        ~ 是用户的主目录，windows系统中是 c：/user/登录系统的用户名

    ② 远程仓库，分为为全世界范围内的开发人员提供服务的中央仓库、为全世界范围内某些特定的用户提供服务的中央仓库镜像、为本公司提供服务自己架设的私服。中央仓库是maven默认的远程仓库。
        地址：https://repo1.maven.org/maven2/

    ③ 私服，在局域网环境中部署的服务器，为当前局域网范围内的所有 Maven工程服务。公司中常常使用这种方式。

    在构建过程中如果需要某些插件，先到本地仓库查找，如果找不到，到远程中央仓库查找；如果能找到，则先把所需要的插件下载到本地仓库，再使用，并且下次直接使用本地仓库的；如果没有，则构建失败。


maven 项目中配置
    菜单 Preferences -> Build,Execution,Deployment -> Maven
        Maven home directory: maven 安装主目录
            /Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven3
        User settings file: maven 的 settings.xml 文件
            /Users/mac/.m2/settings.xml
        Local repository: 本地仓库所在位置
            /Users/mac/.m2/repository

Maven标准目录介绍：
    ① 项目描述文件pom.xml
        格式如下：
            <project ...>
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.itranswarp.learnjava</groupId>
                <artifactId>hello</artifactId>
                <version>1.0</version>
                <packaging>jar</packaging>
                <properties>
                    ...
                </properties>
                <dependencies>
                    <dependency>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                        <version>1.2</version>
                        <scope>compile</scope>
                    </dependency>
                </dependencies>
            </project>

        标签介绍：
            groupId类似于Java的包名，通常是公司或组织名称
            artifactId类似于Java的类名，通常是项目名称
            一个Maven工程就是由groupId，artifactId，version作为唯一标识。引用第三方库时，就是通过这3个变量来确定
            scope 依赖关系
                compile：默认的也是最常用的，Maven会把这种类型的依赖直接放入classpath。比如，commons-logging
                test：依赖表示仅在测试时使用，正常运行时并不需要。最常用的test依赖就是JUnit
                runtime：编译时不需要，但运行时需要。最典型的runtime依赖是JDBC驱动
                provided：编译时需要，但运行时不需要。最典型的provided依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要

    ② 存放Java源码的目录是 src/main/java
    ③ 存放资源文件的目录是 src/main/resources
    ④ 存放测试源码的目录是 src/test/java
    ⑤ 存放测试资源的目录是 src/test/resources
    ⑥ 所有编译、打包生成的文件都放在 target 目录里

    pom.xml 环境变量的定义，被自身调用，被 application.properties 文件调用，被 controller 文件调用
        参考文档：
            http://www.45fan.com/article.php?aid=1CRxVATCg36M7r9t
            https://blog.csdn.net/weixin_44436677/article/details/126576140


Maven 配置文件 settings.xml 详解
    设置的maven仓库的地址
    # Default: ${user.home}/.m2/repository
    <localRepository>/path/to/local/repo</localRepository>

    配置阿里云镜像。使用阿里云镜像提高下载速度
    <mirror>
        <id>alimaven </id >
        <name>aliyun maven</name>
        <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        <mirrorOf>central</mirrorOf>
    </mirror>

    配置JDK
    <profiles>
        <!-- java jdk1.8版本 -->
        <profile>
            <id>jdk-1.8</id>
            <activation>
                    <activeByDefault>true</activeByDefault>
                <jdk>1.8</jdk>
            </activation>
            <properties>
                <maven.compiler.source>1.8</maven.compiler.source>
                <maven.compiler.target>1.8</maven.compiler.target>
                <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
            </properties>
        </profile>

    配置完成，输入 mvn help:system 测试


maven 相关问题集
    问题描述：
        找不到或无法加载主类 com.example.demo.DemoApplication 解决方案
    解决办法：
        菜单 Preferences -> Build,Execution,Deployment -> Maven -> runner , 选择JRE

    问题描述：
        no jdk specified for module
    解决办法：
        在project Structure 中，source 选择相应的 jdk, language level 选 14, Dependencies中的Module SDK选择相应的jdk版本
        https://blog.csdn.net/cjhxydream/article/details/90669355

    问题描述：
        unused import statement解决方法
    解决办法：
        菜单 File 下有 invalidate caches/restart 选项，点击即可

    问题描述：
        遇到大规模的含有"Cannot Resolve Symbol"的报错
    解决办法：
        首要考虑maven配置问题（路径不对，以及settings.xml文件配置等），其次考虑jdk版本如1.7和1.8等，scala-sdk版本等

    mac下查看 jar 文件的方法，直接对其进行解压
        unzip -o demo-1.0-SNAPSHOT.jar -d tmp/

    问题描述：
        mvn 依赖问题，找不到依赖包，无法加载新增依赖包等等
    参考文档：
        https://blog.csdn.net/weixin_44436677/article/details/126576140

